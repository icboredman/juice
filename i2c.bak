//
//

#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdint.h>


namespace I2c
{

    int fd = -1;

    int Setup(const char* dev, int addr)
    {
        if ((fd = open(dev, O_RDWR)) < 0)
        {
            //std::cout << "Failed to open the bus." << std::endl;
            /* ERROR HANDLING; you can check errno to see what went wrong */
            return -1;
        }

        if (ioctl(fd, I2C_SLAVE, addr) < 0)
        {
            //std::cout << "Failed to acquire bus access and/or talk to slave." << std::endl;
            /* ERROR HANDLING; you can check errno to see what went wrong */
            return -2;
        }

    }

    int Read8(uint8_t* val, uint8_t reg)
    {
        if (fd < 0)
        {
            //std::cout << "Device not setup." << std::endl;
            return -1;
        }
        if (write(fd, &reg, 1) != 1)
        {
            //std::cout << "Failed to write register to i2c device" << std::endl;
            return -2;
        }
        if (read(fd, val, 1) != 1)
        {
            //std::cout << "Failed to read value from i2c device" << std::endl;
            return -3;
        }
        return 0;
    }

    int Read16(uint16_t* val, uint8_t reg)
    {
        uint8_t buf[2];
        if (Read8(&buf[0], reg) < 0)
            return -1;
        if (Read8(&buf[1], reg+1) < 0)
            return -2;

        *val = (buf[0] << 8) + buf[1];

        return 0;
/*
        if (fd < 0)
        {
            //std::cout << "Device not setup." << std::endl;
            return -1;
        }
        if (write(fd, &reg, 1) != 1)
        {
            //std::cout << "Failed to write register to i2c device" << std::endl;
            return -2;
        }
        uint8_t buf[2];
        if (read(fd, buf, 2) != 2)
        {
            //std::cout << "Failed to read double value from i2c device" << std::endl;
            return -3;
        }
        *val = ((uint16_t)buf[0]) << 8 + buf[1];
        return 0;
*/
    }

    int Write8(uint8_t val, uint8_t reg)
    {
        if (fd < 0)
        {
            //std::cout << "Device not setup." << std::endl;
            return -1;
        }
        uint8_t buf[2];
        buf[0] = reg;
        buf[1] = val;
        if (write(fd, buf, 2) != 2)
        {
            //std::cout << "Failed to write register and value to i2c device" << std::endl;
            return -2;
        }
        return 0;
    }



}
