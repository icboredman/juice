//
//

#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdint.h>


namespace I2c
{

    class I2cDriver
    {
    public:

        I2cDriver(const char* dev, int addr)
        {
            fd = -1;
            if ((fd = open(dev, O_RDWR)) < 0)
            {
                //std::cout << "Failed to open the bus." << std::endl;
                /* ERROR HANDLING; you can check errno to see what went wrong */
                return;
            }

            if (ioctl(fd, I2C_SLAVE, addr) < 0)
            {
                //std::cout << "Failed to acquire bus access and/or talk to slave." << std::endl;
                /* ERROR HANDLING; you can check errno to see what went wrong */
                close(fd);
                fd = -1;
                return;
            }
        }

        int Read8(uint8_t &val, uint8_t reg)
        {
            if (fd < 0)
                return -1;
            if (write(fd, &reg, 1) != 1)
                return -2;
            if (read(fd, &val, 1) != 1)
                return -3;
            return 0;
        }

        int Read2(uint16_t &val, uint8_t reg)
        {
            uint8_t buf[2];
            int r;
            if ((r = Read8(&buf[0], reg)) < 0)
                return r;
            if ((r = Read8(&buf[1], reg+1)) < 0)
                return r*10;
            val = (buf[0] << 8) + buf[1];
            return 0;
        }

        int Write8(uint8_t val, uint8_t reg)
        {
            if (fd < 0)
                return -1;
            uint8_t buf[2];
            buf[0] = reg;
            buf[1] = val;
            if (write(fd, buf, 2) != 2)
                return -2;
            return 0;
        }

    private:
        int fd;

    }

}
